name: üõ°Ô∏è Security Analysis

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run CodeQL analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUN_VERSION: latest

jobs:
  # üîç CodeQL Analysis
  codeql:
    name: üîç CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript' ]

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build project
        run: bun run build

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # üîê Dependency Vulnerability Scan
  dependency-scan:
    name: üîê Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üîç Run security audit
        run: |
          echo "üîç Running dependency security audit..."
          
          # Check for known vulnerabilities using bun
          bun audit || echo "‚ö†Ô∏è Vulnerabilities found - review required"
          
          # Additional npm audit for broader coverage
          if command -v npm &> /dev/null; then
            npm audit --audit-level=moderate --production || echo "‚ö†Ô∏è NPM audit found issues"
          fi

      - name: üìã Generate security report
        uses: actions/github-script@v7
        if: failure()
        with:
          script: |
            const { context } = require('@actions/github');
            
            const comment = `
            ## üîê Security Audit Results
            
            ‚ö†Ô∏è Security issues were detected during the dependency audit.
            
            ### Recommended Actions:
            1. Review the audit output in the workflow logs
            2. Update vulnerable dependencies using: \`bun update\`
            3. Consider using \`bun audit --fix\` for automatic fixes
            4. For critical vulnerabilities, update immediately
            
            ### Next Steps:
            - Check if patches are available for vulnerable packages
            - Consider alternative packages if fixes aren't available
            - Add security exceptions only after careful review
            
            _This comment was generated automatically by the Security Analysis workflow._
            `;
            
            console.log('Security issues detected. Manual review required.');
            console.log(comment);

  # üïµÔ∏è Secret Scanning
  secret-scan:
    name: üïµÔ∏è Secret Scanning  
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üïµÔ∏è Scan for secrets
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Common secret patterns
            const secretPatterns = [
              { name: 'API Key', pattern: /api[_-]?key\s*[:=]\s*['"]*[a-z0-9]{20,}['"]*$/gmi },
              { name: 'Database URL', pattern: /database[_-]?url\s*[:=]\s*['"]*\w+:\/\/[\w\-\.:@]+['"]*$/gmi },
              { name: 'Private Key', pattern: /-----BEGIN (RSA )?PRIVATE KEY-----/gmi },
              { name: 'JWT Secret', pattern: /jwt[_-]?secret\s*[:=]\s*['"]*[a-z0-9]{20,}['"]*$/gmi },
              { name: 'Password', pattern: /password\s*[:=]\s*['"]*[a-z0-9!@#$%^&*]{8,}['"]*$/gmi }
            ];
            
            const suspiciousFiles = [];
            
            function scanDirectory(dir) {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              
              entries.forEach(entry => {
                const fullPath = path.join(dir, entry.name);
                
                // Skip node_modules, .git, and dist directories
                if (entry.name.startsWith('.') || 
                    entry.name === 'node_modules' || 
                    entry.name === 'dist') {
                  return;
                }
                
                if (entry.isDirectory()) {
                  scanDirectory(fullPath);
                } else if (entry.isFile() && 
                          (entry.name.endsWith('.js') || 
                           entry.name.endsWith('.ts') || 
                           entry.name.endsWith('.jsx') || 
                           entry.name.endsWith('.tsx') ||
                           entry.name.startsWith('.env'))) {
                  
                  try {
                    const content = fs.readFileSync(fullPath, 'utf8');
                    
                    secretPatterns.forEach(({ name, pattern }) => {
                      if (pattern.test(content)) {
                        suspiciousFiles.push({
                          file: fullPath,
                          type: name
                        });
                      }
                    });
                  } catch (error) {
                    // Skip files that can't be read
                  }
                }
              });
            }
            
            scanDirectory('.');
            
            if (suspiciousFiles.length > 0) {
              console.log('üö® Potential secrets detected:');
              suspiciousFiles.forEach(({ file, type }) => {
                console.log(`  - ${type} in ${file}`);
              });
              
              core.setFailed(`Potential secrets detected in ${suspiciousFiles.length} files. Please review and remove any hardcoded secrets.`);
            } else {
              console.log('‚úÖ No obvious secrets detected in codebase');
            }

  # ‚ö° OWASP ZAP Security Scan (for web apps)
  zap-scan:
    name: ‚ö° OWASP ZAP Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' # Only run on scheduled scans to avoid rate limiting
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build client
        run: bun run build:client

      - name: üöÄ Start development server
        run: |
          bun run dev &
          sleep 30 # Wait for server to start
        continue-on-error: true

      - name: ‚ö° Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:5173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
        continue-on-error: true

  # ‚úÖ Security Status Check
  security-success:
    name: ‚úÖ Security Analysis Complete
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scan]
    if: always()
    
    steps:
      - name: ‚úÖ Check security status
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJson(needs) }};
            
            const failedJobs = Object.entries(jobs)
              .filter(([name, job]) => job.result === 'failure')
              .map(([name]) => name);
              
            const skippedJobs = Object.entries(jobs)
              .filter(([name, job]) => job.result === 'skipped')
              .map(([name]) => name);
            
            if (failedJobs.length > 0) {
              console.log(`‚ùå Security issues detected in: ${failedJobs.join(', ')}`);
              console.log('üîç Please review the security analysis results and address any issues.');
              core.setFailed('Security analysis detected issues that require attention');
            } else {
              console.log('‚úÖ Security analysis completed successfully');
              if (skippedJobs.length > 0) {
                console.log(`‚ÑπÔ∏è Skipped jobs: ${skippedJobs.join(', ')}`);
              }
            }
