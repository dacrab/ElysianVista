name: üé® Code Quality

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUN_VERSION: latest

jobs:
  # üé® Formatting & Linting
  format-and-lint:
    name: üé® Format & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build shared package
        run: bun run build:shared

      - name: üé® Check Prettier formatting
        run: |
          echo "üé® Checking code formatting with Prettier..."
          bun run format:check

      - name: üé® Run ESLint
        run: |
          cd client && bun run lint

      - name: üîç TypeScript strict checks
        run: |
          echo "üîç Running strict TypeScript checks..."
          
          # Client strict checks
          echo "Checking client TypeScript..."
          cd client
          bunx tsc --noEmit --strict || echo "‚ö†Ô∏è Client has TypeScript issues"
          cd ..
          
          # Server strict checks  
          echo "Checking server TypeScript..."
          cd server
          bunx tsc --noEmit --strict || echo "‚ö†Ô∏è Server has TypeScript issues"
          cd ..
          
          # Shared strict checks
          echo "Checking shared TypeScript..."
          cd shared
          bunx tsc --noEmit --strict || echo "‚ö†Ô∏è Shared has TypeScript issues"

  # üîß Auto-fix (only on push to main branches)
  auto-fix:
    name: üîß Auto-fix Issues
    runs-on: ubuntu-latest
    needs: format-and-lint
    if: |
      (github.event_name == 'push') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      failure()
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üîß Auto-fix ESLint issues
        run: |
          echo "üîß Auto-fixing ESLint issues..."
          bun run lint:fix || true

      - name: üé® Auto-format with Prettier
        run: |
          echo "üé® Auto-formatting with Prettier..."
          bun run format || true

      - name: üìù Commit auto-fixes
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              // Check if there are changes to commit
              execSync('git add -A');
              const status = execSync('git status --porcelain').toString();
              
              if (status.trim()) {
                // Configure git
                execSync('git config user.name "github-actions[bot]"');
                execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
                
                // Commit the changes
                execSync('git commit -m "ü§ñ Auto-fix: Code formatting and linting issues"');
                execSync('git push');
                
                console.log('‚úÖ Auto-fixes committed and pushed');
              } else {
                console.log('‚ÑπÔ∏è No auto-fixes needed');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Auto-fix commit failed:', error.message);
            }

  # üìä Code Metrics & Analysis
  code-metrics:
    name: üìä Code Metrics
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üìä Generate code metrics
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            function countLines(dir, extensions = ['.ts', '.tsx', '.js', '.jsx']) {
              let totalLines = 0;
              let totalFiles = 0;
              
              function walkDir(currentPath) {
                const items = fs.readdirSync(currentPath);
                
                items.forEach(item => {
                  const itemPath = path.join(currentPath, item);
                  const stat = fs.statSync(itemPath);
                  
                  if (stat.isDirectory() && !['node_modules', 'dist', '.git'].includes(item)) {
                    walkDir(itemPath);
                  } else if (stat.isFile()) {
                    const ext = path.extname(item);
                    if (extensions.includes(ext)) {
                      const content = fs.readFileSync(itemPath, 'utf8');
                      const lines = content.split('\n').length;
                      totalLines += lines;
                      totalFiles += 1;
                    }
                  }
                });
              }
              
              walkDir(dir);
              return { totalLines, totalFiles };
            }
            
            // Analyze different parts of the codebase
            const clientMetrics = countLines('./client/src');
            const serverMetrics = countLines('./server/src');
            const sharedMetrics = countLines('./shared/src');
            
            const report = `
            ## üìä Code Metrics Report
            
            ### üìÅ Codebase Overview
            | Package | Files | Lines | Avg Lines/File |
            |---------|-------|--------|----------------|
            | Client | ${clientMetrics.totalFiles} | ${clientMetrics.totalLines} | ${Math.round(clientMetrics.totalLines / clientMetrics.totalFiles)} |
            | Server | ${serverMetrics.totalFiles} | ${serverMetrics.totalLines} | ${Math.round(serverMetrics.totalLines / serverMetrics.totalFiles)} |
            | Shared | ${sharedMetrics.totalFiles} | ${sharedMetrics.totalLines} | ${Math.round(sharedMetrics.totalLines / sharedMetrics.totalFiles)} |
            
            **Total:** ${clientMetrics.totalFiles + serverMetrics.totalFiles + sharedMetrics.totalFiles} files, ${clientMetrics.totalLines + serverMetrics.totalLines + sharedMetrics.totalLines} lines
            
            ### üéØ Code Quality Indicators
            - ‚úÖ ESLint configured for client
            - ‚úÖ TypeScript strict mode enabled  
            - ‚úÖ Monorepo structure with proper separation
            - ‚úÖ Shared types and utilities
            
            _Generated automatically by Code Quality workflow_
            `;
            
            console.log(report);
            
            // Save metrics to file for potential artifacts
            fs.writeFileSync('code-metrics.md', report);

      - name: üìä Upload code metrics
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: code-metrics.md
          retention-days: 30

  # ‚úÖ Quality Gate
  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: [format-and-lint, code-metrics]
    if: always()
    
    steps:
      - name: ‚úÖ Evaluate quality gate
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJson(needs) }};
            
            const criticalJobs = ['format-and-lint'];
            const failedCriticalJobs = criticalJobs.filter(job => 
              jobs[job] && jobs[job].result === 'failure'
            );
            
            if (failedCriticalJobs.length > 0) {
              const message = `‚ùå Code quality checks failed: ${failedCriticalJobs.join(', ')}`;
              console.log(message);
              console.log('\nüîß To fix formatting issues locally, run:');
              console.log('  cd client && bun run lint --fix');
              console.log('  cd client && bunx prettier --write "src/**/*.{ts,tsx,js,jsx,css}"');
              core.setFailed(message);
            } else {
              console.log('‚úÖ All code quality checks passed!');
              
              // Log any warnings from non-critical jobs
              Object.entries(jobs).forEach(([name, job]) => {
                if (job.result === 'failure' && !criticalJobs.includes(name)) {
                  console.log(`‚ö†Ô∏è Non-critical job failed: ${name}`);
                }
              });
            }
