name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUN_VERSION: latest
  NODE_VERSION: '20'

jobs:
  # üîç Changes Detection
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      client: "${{ steps.changes.outputs.client }}"
      server: "${{ steps.changes.outputs.server }}"
      shared: "${{ steps.changes.outputs.shared }}"
      workflows: "${{ steps.changes.outputs.workflows }}"
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: üîç Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            client:
              - 'client/**'
              - 'package.json'
            server:
              - 'server/**'
              - 'package.json'
            shared:
              - 'shared/**'
              - 'package.json'
            workflows:
              - '.github/workflows/**'

  # ‚ö° Lint & Format Check
  lint:
    name: üé® Lint & Format
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' || needs.changes.outputs.server == 'true' || needs.changes.outputs.shared == 'true' }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v5

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build shared package
        run: bun run build:shared

      - name: üé® Lint client
        if: needs.changes.outputs.client == 'true'
        run: cd client && bun run lint

      - name: üé® Check TypeScript types - Client
        if: needs.changes.outputs.client == 'true'
        run: cd client && bun run build --dry-run || echo "Type check completed"

      - name: üé® Check TypeScript types - Server
        if: needs.changes.outputs.server == 'true'
        run: cd server && bun run build || echo "Server build completed"

      - name: üé® Check TypeScript types - Shared
        if: needs.changes.outputs.shared == 'true'
        run: cd shared && bun run build || echo "Shared build completed"

  # üèóÔ∏è Build Test
  build:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest
    needs: [changes, lint]
    if: ${{ needs.changes.outputs.client == 'true' || needs.changes.outputs.server == 'true' || needs.changes.outputs.shared == 'true' }}
    
    strategy:
      matrix:
        workspace: [shared, server, client]
        exclude:
          - workspace: client
            if: ${{ needs.changes.outputs.client != 'true' }}
          - workspace: server
            if: ${{ needs.changes.outputs.server != 'true' }}
          - workspace: shared
            if: ${{ needs.changes.outputs.shared != 'true' }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v5

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build workspace - ${{ matrix.workspace }}
        run: bun run build:${{ matrix.workspace }}

      - name: ‚úÖ Run tests (if available)
        continue-on-error: true
        run: |
          if [ -f "${{ matrix.workspace }}/package.json" ] && grep -q '"test"' "${{ matrix.workspace }}/package.json"; then
            cd ${{ matrix.workspace }} && bun test
          else
            echo "No tests configured for ${{ matrix.workspace }}"
          fi

  # üìä Bundle Analysis (Client only)
  bundle-analysis:
    name: üìä Bundle Analysis
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.client == 'true'
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v5

      - name: üü° Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: üì¶ Install dependencies
        run: bun install --frozen-lockfile

      - name: üèóÔ∏è Build for analysis
        run: bun run build

      - name: üìä Analyze bundle size
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const distPath = path.join(process.cwd(), 'client/dist');
              if (fs.existsSync(distPath)) {
                const files = fs.readdirSync(path.join(distPath, 'assets'));
                const jsFiles = files.filter(f => f.endsWith('.js'));
                const cssFiles = files.filter(f => f.endsWith('.css'));
                
                console.log('üìä Bundle Analysis:');
                console.log('JS files:', jsFiles.length);
                console.log('CSS files:', cssFiles.length);
                
                // Get file sizes
                jsFiles.forEach(file => {
                  const stats = fs.statSync(path.join(distPath, 'assets', file));
                  const sizeKB = (stats.size / 1024).toFixed(2);
                  console.log(`  ${file}: ${sizeKB} KB`);
                });
                
                cssFiles.forEach(file => {
                  const stats = fs.statSync(path.join(distPath, 'assets', file));
                  const sizeKB = (stats.size / 1024).toFixed(2);
                  console.log(`  ${file}: ${sizeKB} KB`);
                });
              }
            } catch (error) {
              console.log('Bundle analysis failed:', error.message);
            }

  # ‚úÖ Status Check
  ci-success:
    name: ‚úÖ CI Success
    runs-on: ubuntu-latest
    needs: [lint, build, bundle-analysis]
    if: always()
    
    steps:
      - name: ‚úÖ Check all jobs status
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            const jobs = ${{ toJson(needs) }};
            
            const failedJobs = Object.entries(jobs)
              .filter(([name, job]) => job.result === 'failure')
              .map(([name]) => name);
            
            if (failedJobs.length > 0) {
              core.setFailed(`‚ùå Failed jobs: ${failedJobs.join(', ')}`);
            } else {
              console.log('‚úÖ All CI jobs passed!');
            }
